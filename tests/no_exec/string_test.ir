#F_BEGIN;
    #F_NAME show_game_place;
    #F_ARGS_BEGIN;
        @Array #100 game_place;
    #F_ARGS_END;
    #F_VARS_BEGIN;
        @Array #10 Int sub_array;
        @Array #10 Int repeats;
        @Int k;
        @Int end;
    #F_VARS_END;
    #F_BODY_BEGIN;
        #range repeats #0 #100 #10;
        #FOR k IN repeats;
            #+ end k #10;
            #substring sub_array game_place k end;
            #println sub_array;
        #ENDFOR;
    #F_BODY_END;
#F_END;

#F_BEGIN;
    #F_NAME zeros_fill;
    #F_VARS_BEGIN;
        @Array #100 Int array;
        @Int k;
    #F_VARS_END;
    #F_BODY_BEGIN;
        #range array #0 #100 #1;
        #FOR k IN array;
            #[] array k #0;
        #ENDFOR;
        #F_RETURN array;
    #F_BODY_END;
#F_END;

#F_BEGIN;
    #F_NAME ]+[;
    #F_ARGS_BEGIN;
        @Array x Int array;
        @Int index;
        @Int var;
    #F_ARGS_END;
    #F_VARS_BEGIN;
        @Int arg2;
    #F_VARS_END;
    #F_BODY_BEGIN;
        #][ array index var;
        #+ var var arg2;
        #F_RETURN var;
    #F_BODY_END;
#F_END;

#F_BEGIN;
    #F_NAME add_if_in_range;
    #F_ARGS_BEGIN;
        @Int sum;
        @Array #100 Int game_place;
        @Int coordinate;
    #F_ARGS_END;
    #F_BODY_BEGIN;
    #IF <= #0 coordinate;
        #IF > #100 coordinate;
            #show_game_place #0 game_place;
            #]+[ sum game_place coordinate sum;
            #F_RETURN sum;
        #ENDIF;
    #ENDIF;
    #F_RETURN #0;
    #F_BODY_END;
#F_END;

#F_BEGIN;
    #F_NAME neighbors_sum;
    #F_ARGS_BEGIN;
        @Array #100 Int game_place;
        @Int coordinate;
    #F_ARGS_END;
    #F_VARS_BEGIN;
        @Int sum;
    #F_VARS_END;
    #F_BODY_BEGIN;
        #- coordinate coordinate #11;
        #IF > coordinate #0;
            #][ game_place coordinate sum;
        #ENDIF;
        #+ coordinate coordinate #1;
        #add_if_in_range sum game_place coordinate sum;
        #+ coordinate coordinate #1;
        #add_if_in_range sum game_place coordinate sum;
        #+ coordinate coordinate #8;
        #add_if_in_range sum game_place coordinate sum;
        #+ coordinate coordinate #2;
        #add_if_in_range sum game_place coordinate sum;
        #+ coordinate coordinate #8;
        #add_if_in_range sum game_place coordinate sum;
        #+ coordinate coordinate #1;
        #]add_if_in_range sum game_place coordinate sum;
        #+ coordinate coordinate #1;
        #add_if_in_range sum game_place coordinate sum;
        #F_RETURN sum;
    #F_BODY_END;
#F_END;

#F_BEGIN;
    #F_NAME copy;
    #F_ARGS_BEGIN;
        @Array x Int arr;
    #F_ARGS_END;
    #F_BODY_BEGIN;
        #F_RETURN arr;
    #F_BODY_END;
#F_END;

#F_BEGIN;
    #F_NAME println;
    #F_ARGS_BEGIN;
        @Array x Int array;
    #F_ARGS_END;
    #F_VARS_BEGIN;
        @Int char;
    #F_VARS_END;
    #F_BODY_BEGIN;
        #FOR char IN array;
            #print_char char;
            #print_char #32;
        #ENDFOR;
        #print_char #13;
    #F_BODY_END;
#F_END;

#F_BEGIN;
    #F_NAME substring;
    #F_ARGS_BEGIN;
        @Array #100 Int array;
        @Int begin;
        @Int end;
    #F_ARGS_END;
    #F_VARS_BEGIN;
        @Array #10 Int result;
        @Array #10 Int range;
        @Int elm;
        @Int k;
    #F_VARS_END;
    #F_BODY_BEGIN;
        #range range begin end #1;
        #FOR k IN range;
            #][ array k elm;
            #- K K begin;
            #[] result k elm;
        #ENDFOR;
        #F_RETURN result;
    #F_BODY_END;
#F_NAME;

#F_BEGIN;
    #F_NAME make_begin_situation;
    #F_ARGS_BEGIN;
        @Array #10 Int coords;
        @Array x Int game_place;
    #F_ARGS_END;
    #F_VARS_BEGIN;
        @Int k;
        @Array #5 Int range;
    #F_VARS_END;
    #F_BODY_BEGIN;
        #FOR k IN coords;
            #IF != k #-1;
                #[] game_place k #1;
            #ENDIF;
        #ENDFOR;
        #F_RETURN game_place;
    #F_BODY_END;
#F_END;

#F_BEGIN;
    #F_NAME main;
    #F_VARS_BEGIN;
        @Array #100 Int game_place;
        @Array #100 Int range;
        @Array #10 Int begin;
        @Int sum;
        @Int elm;
        @Int k;
    #F_VARS_END;
    #F_BODY_BEGIN;
        // Start situation
        #[] begin #0 #42;
        #[] begin #1 #44;
        #[] begin #2 #45;
        #[] begin #3 #22;
        #[] begin #4 #99;
        #[] begin #5 #11;
        #[] begin #6 #12;
        #[] begin #7 #24;
        #[] begin #8 #55;
        #[] begin #9 #7;

        #zeros_fill game_place;
        #make_begin_situation game_place begin game_place;
        #WHILE = #1 #1;
            #range range #0 #100 #1;
            #FOR k IN range;
                #neighbors_sum sum game_place k;
                #][ game_place k elm;
                #IF = elm #0;
                    #IF = sum #3;
                        #[] range k #1;
                    #ELSE;
                        #[] range k #0;
                    #ENDIF;
                #ELSE;
                    #IF = sum #2;
                        #[] range k #1;
                    #ELIF = sum #3;
                        #[] range k #1;
                    #ELSE;
                        #[] range k #0;
                    #ENDIF;
                #ENDIF;
            #ENDFOR;
            #copy game_place range;
            #clear_out #0;
            #show_game_place #0 game_place;
            #sleep #0 #200;
        #ENDWHILE;
    #F_BODY_END;
#F_END;